import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function resetParcialDB() {
  console.log('üßπ Iniciando reset parcial de la base de datos...');
  console.log('üìã Manteniendo: usuarios, productos, categor√≠as y configuraci√≥n AFIP');
  
  try {
    // Orden de borrado respetando relaciones de clave for√°nea
    
    // 1. Borrar tablas dependientes primero
    console.log('üóëÔ∏è  Borrando sesiones de usuario...');
    await prisma.sesionUsuario.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando detalles de ventas...');
    await prisma.detalleVenta.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando ventas...');
    await prisma.venta.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando movimientos de caja...');
    await prisma.movimientoCaja.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando turnos...');
    await prisma.turno.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando mesas...');
    await prisma.mesa.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando objetos decorativos...');
    await prisma.objetoDecorativo.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando sectores...');
    await prisma.sector.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando clientes...');
    await prisma.cliente.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando detalles de presupuestos...');
    await prisma.detallePresupuesto.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando presupuestos...');
    await prisma.presupuesto.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando detalles de facturas recurrentes...');
    await prisma.detalleFacturaRecurrente.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando facturas recurrentes...');
    await prisma.facturaRecurrente.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando ventas recurrentes...');
    await prisma.ventaRecurrente.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando precios de productos...');
    await prisma.precioProducto.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando listas de precios por cliente...');
    await prisma.listaPrecioCliente.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando listas de precios...');
    await prisma.listaPrecio.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando liquidaciones de sueldos...');
    await prisma.liquidacionSueldo.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando empleados...');
    await prisma.empleado.deleteMany({});
    
    console.log('üóëÔ∏è  Borrando cheques...');
    await prisma.cheque.deleteMany({});
    
    // 2. Verificar qu√© se mantuvo
    console.log('\n‚úÖ Reset parcial completado. Estado actual:');
    
    const usuarios = await prisma.usuario.count();
    console.log(`üë§ Usuarios: ${usuarios}`);
    
    const categorias = await prisma.categoria.count();
    console.log(`üìÇ Categor√≠as: ${categorias}`);
    
    const productos = await prisma.producto.count();
    console.log(`üì¶ Productos: ${productos}`);
    
    const configAfip = await prisma.configuracionAfip.count();
    console.log(`üèõÔ∏è  Configuraci√≥n AFIP: ${configAfip}`);
    
    const configSistema = await prisma.configuracionSistema.count();
    console.log(`‚öôÔ∏è  Configuraci√≥n Sistema: ${configSistema}`);
    
    // 3. Verificar que todo lo dem√°s se borr√≥
    const ventas = await prisma.venta.count();
    const mesas = await prisma.mesa.count();
    const turnos = await prisma.turno.count();
    const sectores = await prisma.sector.count();
    
    console.log(`\nüßπ Datos borrados (deber√≠a ser 0):`);
    console.log(`üí∞ Ventas: ${ventas}`);
    console.log(`ü™ë Mesas: ${mesas}`);
    console.log(`üïê Turnos: ${turnos}`);
    console.log(`üè¢ Sectores: ${sectores}`);
    
    console.log('\nüéâ ¬°Reset parcial completado exitosamente!');
    console.log('üìù Datos mantenidos: usuarios, productos, categor√≠as, configuraci√≥n AFIP y sistema');
    
  } catch (error) {
    console.error('‚ùå Error durante el reset parcial:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
resetParcialDB()
  .then(() => {
    console.log('‚úÖ Script ejecutado correctamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en el script:', error);
    process.exit(1);
  }); 