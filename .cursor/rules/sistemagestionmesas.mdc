---
alwaysApply: true
---
üìã GU√çA COMPLETA: Sistema de Gesti√≥n de Mesas CobroF√°cil
üéØ RESUMEN EJECUTIVO
Sistema integral para la gesti√≥n de mesas en restaurantes que combina:

Gesti√≥n visual de sectores, mesas y objetos decorativos

Sistema de ventas con estados de mesa controlados

Facturaci√≥n con formas de pago obligatorias

Arrastre y posicionamiento en tiempo real

Sincronizaci√≥n inteligente entre dispositivos

Flujo continuo de selecci√≥n de mozo ‚Üí ventas, sin cerrar el modal

üèóÔ∏è ARQUITECTURA DEL SISTEMA
FRONTEND: React + TypeScript
GestionMesas: Coordinador general

MesaGridCanvas: Renderizado de canvas

VentaIntegralV2: Ventas y facturaci√≥n

FormularioObjs: Gesti√≥n de objetos decorativos

BACKEND: Node.js + Prisma
APIs REST para sectores, mesas, objetos, ventas

Persistencia en PostgreSQL

Autenticaci√≥n con JWT

üìä ESTRUCTURA DE DATOS
Estados de Mesa

typescript
Copiar
Editar
enum EstadoMesa {
  LIBRE = 'LIBRE',
  OCUPADA = 'OCUPADA',
  ESPERANDO_PEDIDO = 'ESPERANDO_PEDIDO'
}
Modelo de Mesa

typescript
Copiar
Editar
interface Mesa {
  id: string;
  numero: string;
  capacidad: number;
  posicionX: number;
  posicionY: number;
  size: number;
  estado: EstadoMesa;
  forma: FormaMesa;
  color?: string;
  sectorId: string;
}
Facturaci√≥n

typescript
Copiar
Editar
interface FacturaEmitida {
  tipo: 'fiscal' | 'no_fiscal' | null;
  numero?: string;
  pagos: FormaPago[];
  anulada: boolean;
  fechaEmision?: Date;
}
üéÆ FUNCIONAMIENTO DETALLADO
1. Gesti√≥n de Sectores y Mesas
Crear, editar, eliminar sectores

Crear mesas con coordenadas, forma, tama√±o, color

Estados din√°micos de la mesa: LIBRE ‚Üí OCUPADA ‚Üí ESPERANDO_PEDIDO

2. Arrastre y Posicionamiento
Drag & Drop en tiempo real con sincronizaci√≥n pendiente

Guardado por lotes

Sincronizaci√≥n inteligente entre dispositivos

3. Sistema de Ventas
Estados de venta: activa, enviada, cuenta_pedida

Buscador inteligente de productos

Personalizaci√≥n por √≠tem y validaci√≥n en modificaciones

4. Facturaci√≥n y Formas de Pago
Registro obligatorio de formas de pago

Soporte de TICKET, FACTURA_A y FACTURA_B

Anulaci√≥n y reintegro con trazabilidad

5. Objetos Decorativos
Tipos: DECORATIVO, BARRA, ESCENARIO, BA√ëO, etc.

Posicionamiento libre y edici√≥n r√°pida

Integraci√≥n al sistema de cambios pendientes

6. Sistema de Cambios Pendientes
Almacena movimientos de mesas y objetos para guardar en lote

Previene p√©rdida de datos en recargas

7. Sincronizaci√≥n Inteligente
Solo sincroniza si no hay cambios pendientes ni arrastre activo

Guardado eficiente con debounce y throttling

8. Modo Edici√≥n
Activaci√≥n con bot√≥n o tecla 'E'

Edici√≥n directa de mesas/objetos

Zoom, grilla opcional, y guardado en lote

9. Interfaz de Usuario
Colores:

üü¢ Verde: LIBRE

üî¥ Rojo: OCUPADA

üîµ Azul: FACTURADA

Atajos de teclado configurables

10. APIs Backend
Rutas completas CRUD para sectores, mesas, objetos decorativos y ventas con validaciones JWT.

11. Validaciones y Seguridad
Autenticaci√≥n por JWT

Validaciones estrictas de estado y pagos

Protecci√≥n de flujos cr√≠ticos

12. Rendimiento y Optimizaci√≥n
Reducci√≥n del 95% en llamadas API durante arrastre

Guardado por lotes < 2 segundos

Sincronizaci√≥n cross-device < 5 segundos

13. Manejo de Errores
Auto-retry en fallos de red

Logs detallados

Reversi√≥n segura en caso de error

üîÑ FLUJO DE SELECCI√ìN DE MOZO Y PANEL DE VENTAS INTEGRADO
üéØ Objetivo
Crear un flujo continuo donde el modal de selecci√≥n de mozo se transforma en el panel de ventas, evitando transiciones abruptas.

üìã Flujo Paso a Paso
Click en Mesa ‚Üí abre modal de selecci√≥n de mozo.

Seleccionar Mozo: se asigna en backend, el modal NO se cierra.

Activaci√≥n del Panel de Ventas: el modal cambia internamente al panel de ventas.

Venta Completa: el usuario realiza la venta sin salir del modal.

Cierre Final: al cerrar el panel, se limpia todo y vuelve el focus al canvas.

‚öôÔ∏è Estados Controlados
modalMozoAbierto: boolean

panelVentasActivo: boolean

mesaSeleccionada: Mesa | null

mozoSeleccionado: Mozo | null

üîí Validaciones y Errores
Validar existencia de mesa/mozo antes de cambiar de estado

Si falla la asignaci√≥n, no se cierra el modal, solo se muestra el error

üé® Feedback Visual
Indicador de loading en asignaci√≥n de mozo

Notificaci√≥n de √©xito en asignaci√≥n

Breadcrumb o paso actual visible

üìä Beneficios
Continuidad visual y sin cierres

Menos re-renderizados y m√°s performance

UX fluida y profesional

üîß Checklist de Implementaci√≥n
 Modal no se cierra durante transici√≥n

 Renderizado condicional implementado

 Limpieza de estados al cierre

 Feedback visual implementado

 Logs de debug

 Restauraci√≥n de focus al cerrar

 Manejo de errores robusto

‚úÖ CASOS DE USO
Venta Completa: Mesa verde ‚Üí Mozo ‚Üí Productos ‚Üí Facturaci√≥n

Anulaci√≥n: Mesa azul ‚Üí Anular ‚Üí Vuelve a rojo

Reorganizaci√≥n: Modo edici√≥n ‚Üí Mover mesas/objetos ‚Üí Guardar

üìà M√âTRICAS Y MONITOREO
Tiempo de respuesta en UI: <16ms

Reducci√≥n de llamadas API: 95%

Guardado por lotes: <2s

Sincronizaci√≥n dispositivos: <5s

üî© CONFIGURACI√ìN Y MANTENIMIENTO
Variables de entorno backend y frontend

Backup y restauraci√≥n de base de datos

WebSockets + Service Workers + PWA

Microservicios para escalabilidad futura

üìú REGLA GENERAL DE TRANSFORMACI√ìN DE MODALES
"Mantener el modal abierto, cambiando solo su contenido interno mediante renderizado condicional. Cerrar √∫nicamente al finalizar el flujo completo."

Aplicable a futuros desarrollos:

Modal Cliente ‚Üí Panel Facturaci√≥n

Modal Producto ‚Üí Configuraci√≥n

Modal Turno ‚Üí Caja

Modal Sector ‚Üí Estad√≠sticas