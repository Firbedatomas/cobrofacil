---
alwaysApply: true
---

üéØ Objetivo General
Implementar una l√≥gica integral de control de estados de mesas, proceso de cobro, anulaci√≥n y reemisi√≥n, con persistencia de datos, trazabilidad completa y consistencia transaccional para entornos multiusuario y multidispositivo.

üìã CRITERIOS OBLIGATORIOS
‚úÖ Criterio 1: Estados de la Mesa (3 √∫nicos visuales)
Cada mesa debe tener un identificador √∫nico de m√°ximo 4 caracteres, con las siguientes reglas:

M√°ximo 2 letras (may√∫sculas preferidas).

M√°ximo 2 n√∫meros.

Ejemplos v√°lidos: A1, B12, AA12, M05.

Ejemplo de patr√≥n REGEX recomendado:
^[A-Z]{1,2}[0-9]{1,2}$

Estados visuales:

Verde: Mesa vac√≠a, sin √≠tems ni facturaci√≥n.

Rojo: Mesa con √≠tems cargados o comanda impresa, sin facturaci√≥n.

Azul: Mesa facturada (ticket fiscal o no fiscal emitido).

‚úÖ Criterio 2: Condiciones para el cambio de estado
Estado Verde: Solo si:

No hay √≠tems cargados.

El proceso de cobro est√° completado (factura emitida y pago registrado).

Estado Rojo:

Cualquier √≠tem cargado o comanda impresa.

Estado Azul:

Emisi√≥n efectiva de un ticket fiscal o no fiscal.

No basta con imprimir la comanda.

‚úÖ Criterio 3: Registro obligatorio de forma de cobro
Al emitir el ticket se debe registrar:

Forma de pago:

Efectivo

Tarjeta

QR

Transferencia

Combinaci√≥n parcial

Registro persistente de m√©todos y montos.

‚úÖ Criterio 4: L√≥gica de anulaci√≥n y reemisi√≥n
Si se quiere cambiar la forma de pago post emisi√≥n:

Se debe anular obligatoriamente el ticket existente.

La mesa vuelve autom√°ticamente a estado rojo.

Se permite seleccionar nueva forma de pago.

Se emite nuevo ticket.

Durante la anulaci√≥n:

Activar flag interno: "anulaci√≥n_en_proceso" para evitar dobles cobros o fallos.

‚úÖ Criterio 5: Reinicio completo de la mesa
Tras confirmar el cobro y emitir el ticket:

Cambiar estado de mesa a verde.

Vaciar todos los √≠tems.

Registrar toda la operaci√≥n en la base de datos.

Persistir la transacci√≥n de forma √≠ntegra y completa.

üì¶ Formato de Implementaci√≥n y Datos Persistentes
{
  "mesa": {
    "id": "AA12",
    "estado": "verde | rojo | azul",
    "items": [...],
    "factura": {
      "tipo": "fiscal | no fiscal",
      "pagos": [
        {"m√©todo": "efectivo | tarjeta | qr | transferencia", "monto": float}
      ],
      "anulada": false,
      "estadoProceso": "normal | anulaci√≥n_en_proceso"
    },
    "historial": [
      {
        "accion": "emisi√≥n | anulaci√≥n | reemisi√≥n",
        "usuario": "nombre_usuario",
        "fechaHora": "ISO8601",
        "detalle": "detalle contextual"
      }
    ]
  }
}
‚ö†Ô∏è Validaciones Requeridas
El identificador de la mesa debe cumplir el patr√≥n de hasta 2 letras + hasta 2 n√∫meros.

No se puede emitir ticket sin definir forma de pago.

No se puede pasar a verde sin haber completado cobro.

La anulaci√≥n debe marcar la factura como anulada y dejarla en hist√≥rico.

Validar que el proceso de anulaci√≥n + reemisi√≥n sea at√≥mico, evitando estados inconsistentes.

Registrar siempre:

Usuario responsable.

Fecha/hora.

Terminal de ejecuci√≥n.

üß† Contexto Clave
Fundamental para:

Trazabilidad operativa y contable.

An√°lisis de ventas por m√©todo de pago.

Auditor√≠a de anulaciones y reemisiones.

Previene errores en la caja o dobles cobros.

üîç Instrucciones Adicionales
Tono: T√©cnico y directo para desarrollo.

Priorizar:

Consistencia entre frontend y backend.

Persistencia de todos los movimientos en la base de datos.

Integridad transaccional para evitar desincronizaciones.

Incluir logs completos de:

Emisi√≥n.

Anulaci√≥n.

Reemisi√≥n.

